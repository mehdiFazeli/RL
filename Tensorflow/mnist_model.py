# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1knlDLFvuOXHLz7OqpC2Cjrio0Za-tEXy
"""

import numpy as np
import tensorflow as tf
from numpy import genfromtxt

def scale(data):
  images =  data[:,1:].reshape(-1, 28, 28)
  #images =  data[:,1:]
  labels =  data[:,0]
  images = tf.cast(images, tf.float32)
  images /= 255
  return  {'images': images, 'labels':labels}

train_raw_data = genfromtxt('/content/sample_data/mnist_train_small.csv', delimiter=',')
test_validation_data = genfromtxt('/content/sample_data/mnist_test.csv', delimiter=',')

train_shuffled_data = np.random.shuffle(train_raw_data);
test_validation_shuffled_data = np.random.shuffle(test_validation_data)

validationSize = tf.cast(test_validation_data.shape[0] * 0.5, tf.int64)

validation_raw_data = test_validation_data[:validationSize]
test_raw_data = test_validation_data[validationSize:]

train_data = scale(train_raw_data)
validation_data = scale(validation_raw_data)
test_data = scale(test_raw_data)

print(train_data['labels'][0])
print(train_data['images'][0])

input_size = 784
output_size = 10
hidden_layer_width = 50

model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28,28)),
    tf.keras.layers.Dense(hidden_layer_width, activation='relu'),
    tf.keras.layers.Dense(hidden_layer_width, activation='relu'),
    tf.keras.layers.Dense(output_size, activation='softmax')
])

model.compile(optimizer='adam', loss='SparseCategoricalCrossentropy', metrics=['accuracy'])

model.fit(x= train_data['images'], y = train_data['labels'], batch_size= 32, epochs= 3, 
          validation_data=(validation_data['images'], validation_data['labels']), verbose=2)

model.evaluate(test_data['images'], test_data['labels'])

pred = model.predict(test_data['images'])
pred = np.argmax(pred, 1)

print (pred.shape)
result = np.equal(pred, test_data['labels'])
print (np.sum(result * 1) / result.size)
print (result)