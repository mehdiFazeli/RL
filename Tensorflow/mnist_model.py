# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1knlDLFvuOXHLz7OqpC2Cjrio0Za-tEXy
"""

import numpy as np
import tensorflow as tf
from numpy import genfromtxt

def scale(data):
  images =  data[:,1:].reshape(-1, 28, 28)
  labels =  data[:,0]
  images = tf.cast(images, tf.float32)
  images /= 255
  return  {'images': images, 'labels':labels}

train_raw_data = genfromtxt('/content/sample_data/mnist_train_small.csv', delimiter=',')
test_raw_data = genfromtxt('/content/sample_data/mnist_test.csv', delimiter=',')

data = np.append(train_raw_data, test_raw_data).reshape(-1, 785)
np.random.shuffle(data)

validation_size = tf.cast(data.shape[0] * 0.05, tf.int64)
test_size = tf.cast(data.shape[0] * 0.1, tf.int64)

train_raw_data = data [:-(validation_size + test_size)]
validation_raw_data = data[-(validation_size + test_size): - test_size]
test_raw_data = data [-test_size: ]

print(train_raw_data.shape)
print(validation_raw_data.shape)
print(test_raw_data.shape)

train_data = scale(train_raw_data)
validation_data = scale(validation_raw_data)
test_data = scale(test_raw_data)

print (train_data['images'].shape)

input_size = 784
output_size = 10
hidden_layer_width = 50

model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28,28)),
    tf.keras.layers.Dense(hidden_layer_width, activation='relu'),
    tf.keras.layers.Dense(hidden_layer_width, activation='relu'),
    tf.keras.layers.Dense(output_size, activation='softmax')
])

model.compile(optimizer='adam', loss='SparseCategoricalCrossentropy', metrics=['accuracy'])

model.fit(x= train_data['images'], y = train_data['labels'], batch_size= 128, epochs= 5, 
          validation_data=(validation_data['images'], validation_data['labels']), verbose=2)

model.evaluate(test_data['images'], test_data['labels'])

pred = model.predict(test_data['images'])
pred = np.argmax(pred, 1)

print (pred.shape)
result = np.equal(pred, test_data['labels'])
print (np.sum(result * 1) / result.size)
print (result)